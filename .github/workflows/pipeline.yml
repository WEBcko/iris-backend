
name: Build and Push Docker image

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m venv venv
        . venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt

  build:
    needs: test  
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
  
      - name: Debug secrets (temporÃ¡rio)
        run: |
          echo "API_URL=${{ secrets.API_URL }}"
          echo "API_KEY=${{ secrets.API_KEY }}"
  
      - name: Build Docker image
        run: |
          docker build -t "${{ secrets.DOCKERHUB_USERNAME }}/back:latest"
  
      - name: Push Docker image 
        run: docker push "${{ secrets.DOCKERHUB_USERNAME }}/back:latest"

  deploy:
    needs: build  
    runs-on: ubuntu-latest
  
    steps:

      - name: Install OpenVPN
        run: sudo apt-get update && sudo apt-get install -y openvpn   
        
      - name: VPN config
        run: echo "${{ secrets.VPN_CONFIG }}" > vpn.ovpn
          
      - name: Connect VPN
        run: sudo openvpn vpn.ovpn
        
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GCLOUD_SSH_KEY }}" > ~/.ssh/gcloud_key
          chmod 600 ~/.ssh/gcloud_key
  
      - name: SSH into VM and deploy container
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/gcloud_key ${{ secrets.GCLOUD_USER }}@${{ secrets.GCLOUD_HOST }} << EOF
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            sudo docker stop back || true
            sudo docker rm back || true
            sudo docker image prune -f
            sudo docker pull "${{ secrets.DOCKERHUB_USERNAME }}"/back:latest
            sudo docker run -d --name back -p 3000:3000 "${{ secrets.DOCKERHUB_USERNAME }}"/back:latest
          EOF
          
