name: Build and Push Docker image

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop
      - 'release-*'

jobs:
  test:
    if: |
      github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release-')
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: blogdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      POSTGRES_DB: blogdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: localhost

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install -r requirements.txt

      - name: Run user tests
        run: |
          . venv/bin/activate
          pytest tests/user_test.py --maxfail=1 --disable-warnings -q

      - name: Run post tests
        run: |
          . venv/bin/activate
          pytest tests/comment_test.py --maxfail=1 --disable-warnings -q
          
  build_and_deploy:
    needs: [test]
    if: always()
    runs-on: ubuntu-latest
    environment: ${{ github.ref }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{ secrets.GCLOUD_PROJECT }}
          credentials_json: '${{ secrets.GKE_SECRET }}'
          install_components: 'gke-gcloud-auth-plugin'

      - name: Install gke-gcloud-auth-plugin
        run: |
          sudo apt-get install -y apt-transport-https ca-certificates gnupg
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | \
            sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | \
            sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - 
          sudo apt-get update
          sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

      - name: Build Docker Image
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev
          docker build -t us-central1-docker.pkg.dev/${{ secrets.GCLOUD_PROJECT }}/back/back:${GITHUB_SHA} .
          docker push us-central1-docker.pkg.dev/${{ secrets.GCLOUD_PROJECT }}/back/back:${GITHUB_SHA}

      - name: Deploy to Production
        if: github.ref == 'refs/heads/main'
        run: |
          gcloud container clusters get-credentials production --zone us-central1 --project ${{ secrets.GCLOUD_PROJECT }}
          kubectl config use-context gke_${{ secrets.GCLOUD_PROJECT }}_us-central1_production
          kubectl set image deployment/back back=us-central1-docker.pkg.dev/${{ secrets.GCLOUD_PROJECT }}/back/back:${{ github.sha }}
      
      - name: Deploy to Staging
        if: github.ref == 'refs/heads/develop'
        run: |
          gcloud container clusters get-credentials stage --zone us-central1 --project ${{ secrets.GCLOUD_PROJECT }}
          kubectl config use-context gke_${{ secrets.GCLOUD_PROJECT }}_us-central1_stage
          kubectl set image deployment/back back=us-central1-docker.pkg.dev/${{ secrets.GCLOUD_PROJECT }}/back/back:${{ github.sha }}
      
      - name: Release Branch
        if: startsWith(github.ref, 'refs/heads/release-')
        run: echo "A imagem da Release branch foi enviado ao Artifact Registry! "

